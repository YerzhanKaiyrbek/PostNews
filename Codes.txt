Windows PowerShell
(C) Корпорация Майкрософт (Microsoft Corporation). Все права защищены.
Попробуйте новую кроссплатформенную оболочку PowerShell (https://aka.ms/pscore6)
PS C:\Users\Рысбекова Лазиза\Desktop\Python\projects\Skillfactory\NewsPortals> venv/scritpts/activate
venv/scritpts/activate : Имя "venv/scritpts/activate" не распознано как имя командлета, функции, файла сценария или выполняемой программы. Проверьте правильность нап
исания имени, а также наличие и правильность пути, после чего повторите попытку.

строка:1 знак:1
+ venv/scritpts/activate
+ ~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (venv/scritpts/activate:String) []
, CommandNotFoundException
                                                                                      python manage.py makemigrations
C:\Users\╨√ёсхъютр ╦рчшчр\AppData\Local\Programs\Python\Python38\python.exe: can't open file 'manage.py': [Errno 2] No such file or directory
(venv) PS C:\Users\Рысбекова Лазиза\Desktop\Python\projects\Skillfactory\NewsPortals> python manage.py makemigrations
C:\Users\╨√ёсхъютр ╦рчшчр\AppData\Local\Programs\Python\Python38\python.exe: can't open file 'manage.py': [Errno 2] No such file or directory
(venv) PS C:\Users\Рысбекова Лазиза\Desktop\Python\projects\Skillfactory\NewsPortals> cd .\NewsPaper\
(venv) PS C:\Users\Рысбекова Лазиза\Desktop\Python\projects\Skillfactory\NewsPortals\NewsPaper> python manage.py makemigrations
Migrations for 'news':
  news\migrations\0001_initial.py
    - Create model Author
    - Create model Category
    - Create model Post
    - Create model PostCategory
    - Add field postCategory to post
    - Create model Comment
(venv) PS C:\Users\Рысбекова Лазиза\Desktop\Python\projects\Skillfactory\NewsPortals\NewsPaper> python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, news, sessions
Running migrations:
  Applying news.0001_initial... OK
(venv) PS C:\Users\Рысбекова Лазиза\Desktop\Python\projects\Skillfactory\NewsPortals\NewsPaper> python manage.py shell
Python 3.8.10 (tags/v3.8.10:3d8993a, May  3 2021, 11:48:03) [MSC v.1928 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from news.models import *
>>> u1 = User.object.create_user(username='Yerzhan')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: type object 'User' has no attribute 'object'
>>> u1 = User.objects.create_user(username='Yerzhan')
>>> u1
<User: Yerzhan>
>>> u2 = User.objects.create_user(username='Sergey')
>>> u2
<User: Sergey>
>>> Author.objects.create(authorUser=u1)
<Author: Author object (1)>
>>> Author.objects.create(authorUser=u2)
<Author: Author object (2)>
>>> u3 = User.objects.create_user(username='Igor')
>>> u3
<User: Igor>
>>> u4 = User.objects.create_user(username='Arman')
>>> Category.objects.create(name='IT')
<Category: Category object (1)>
>>> Category.objects.create(name='Sport')
<Category: Category object (2)>
>>> Category.objects.create(name='Vehicles')
<Category: Category object (3)>
>>> Category.objects.create(name='Games')
<Category: Category object (4)>
>>> author = Author.objects.get(id=1)
>>> author
<Author: Author object (1)>
>>> Post.objects.create(author=author, categoryType='NW', title='sometitle', text='sometext')
<Post: Post object (1)>
>>> Post.objects.get(id=1).title
'sometitle'
>>> Post.objects.create(author=author, categoryType='AR', title='Healthing', text='Make sport is very healthy')
<Post: Post object (2)>
>>> author2 = Author.objects.get(id=2)
>>> author2
<Author: Author object (2)>
>>> Post.objects.create(author=author2, categoryType='AR', title='Python', text='Hello world!')
<Post: Post object (3)>
>>> Post.objects.get(id=1).category.add(Category.objects.get(id=1))
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Post' object has no attribute 'category'
>>> Post.objects.get(id=1).postCategory.add(Category.objects.get(id=1))
>>> Post.objects.get(id=2).postCategory.add(Category.objects.get(id=2))
>>> Post.objects.get(id=3).postCategory.add(Category.objects.get(id=1))
>>> Post.objects.get(id=1).postCategory.add(Category.objects.get(id=3))
>>> Post.objects.get(id=2).postCategory.add(Category.objects.get(id=4))
>>> Post.objects.get(id=3).postCategory.add(Category.objects.get(id=3))
>>> Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=1).authorUser, text='greate post')
<Comment: Comment object (1)>
>>> Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=2).authorUser, text='interesting news')
<Comment: Comment object (2)>
>>> Comment.objects.create(commentPost=Post.objects.get(id=2), commentUser=Author.objects.get(id=2).authorUser, text='LoL')
<Comment: Comment object (3)>
>>> Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=Author.objects.get(id=1).authorUser, text='Python is the best prog')
<Comment: Comment object (4)>
>>> Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=Author.objects.get(id=3).authorUser, text='Hello Skillfactory')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\Users\Рысбекова Лазиза\Desktop\Python\projects\Skillfactory\NewsPortals\venv\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Рысбекова Лазиза\Desktop\Python\projects\Skillfactory\NewsPortals\venv\lib\site-packages\django\db\models\query.py", line 439, in get
    raise self.model.DoesNotExist(
news.models.Author.DoesNotExist: Author matching query does not exist.
>>> Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=Author.objects.get(id=2).authorUser, text='Hello Skillfactory')
<Comment: Comment object (5)>
>>> Comment.objects.get(id=1).like()
>>> Comment.objects.get(id=1).rating
1
>>> Comment.objects.get(id=1).dislike()
>>> Comment.objects.get(id=1).dislike()
>>> Comment.objects.get(id=1).dislike()
>>> Comment.objects.get(id=1).rating
-2
>>> Comment.objects.get(id=2).like()
>>> Comment.objects.get(id=2).like()
>>> Comment.objects.get(id=2).like()
>>> Comment.objects.get(id=3).like()
>>> Comment.objects.get(id=3).like()
>>> Comment.objects.get(id=4).like()
>>> Comment.objects.get(id=5).dislike()
>>> Post.objects.get(id=1).like()
>>> Post.objects.get(id=1).rating()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
TypeError: 'int' object is not callable
>>> Post.objects.get(id=1).rating
1
>>> Post.objects.get(id=1).like()
>>> Post.objects.get(id=1).like()
>>> Post.objects.get(id=1).like()
>>> Post.objects.get(id=1).like()
>>> Post.objects.get(id=1).like()
>>> Post.objects.get(id=2).like()
>>> Post.objects.get(id=2).like()
>>> Post.objects.get(id=2).like()
>>> Post.objects.get(id=3).like()
>>> Post.objects.get(id=3).like()
>>> Post.objects.get(id=3).like()
>>> Post.objects.get(id=3).like()
>>> Post.objects.get(id=3).like()
>>> Post.objects.get(id=3).like()
>>> Post.objects.get(id=3).like()
>>> Post.objects.get(id=3).like()
>>> Post.objects.get(id=3).dislike()
>>> Post.objects.get(id=1).dislike()
>>> Post.objects.get(id=1).dislike()
>>> Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=User.objects.get(id=3).authorUser, text='Hello Skillfactory')')
  File "<console>", line 1
    Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=User.objects.get(id=3).authorUser, text='Hello Skillfactory')')
                                                                                                                                         ^
SyntaxError: EOL while scanning string literal
>>> Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=User.objects.get(id=3), text='Hello Skillfactory')')
  File "<console>", line 1
    Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=User.objects.get(id=3), text='Hello Skillfactory')')
                                                                                                                              ^
SyntaxError: EOL while scanning string literal
>>> Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=User.objects.get(id=3).User, text='Hello Skillfactory')')
  File "<console>", line 1
    Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=User.objects.get(id=3).User, text='Hello Skillfactory')')
                                                                                                                                   ^
SyntaxError: EOL while scanning string literal
>>> Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=User.objects.get(id=3).User, text='Hello Skillfactory')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'User' object has no attribute 'User'
>>> Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=User.objects.get(id=3), text='Hello Skillfactory')
<Comment: Comment object (6)>
>>> Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=User.objects.get(id=4), text='SomeComment')
<Comment: Comment object (7)>
>>> Comment.objects.get(id=6).like()
>>> Comment.objects.get(id=7).like()
>>> Author.objects.get(id=1)
<Author: Author object (1)>
>>> a = Author.objects.get(id=1)
>>> a.update_rating()
>>> a.ratingAuthor
20
>>> b = Author.objects.get(id=2)
>>> b.update_rating()
>>> b.ratingAuthor
25
>>> c = User.objects.get(id=3)
>>> a = Author.objects.order_by('-ratingAuthor')[:1]
>>> a
<QuerySet [<Author: Author object (2)>]>
>>>
